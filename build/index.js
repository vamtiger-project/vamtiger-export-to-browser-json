#!/usr/bin/env node
"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var Selector,Extension,StringConstant,CommandlineArgument,CommandlineArgumentShort,MimeType,path=require("path"),getFileText=_interopDefault(require("vamtiger-get-file-text")),createFile=_interopDefault(require("vamtiger-create-file")),Args=_interopDefault(require("vamtiger-argv/build/main"));function __awaiter(e,n,t,i){return new(t||(t=Promise))(function(r,o){function a(e){try{c(i.next(e))}catch(e){o(e)}}function s(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){e.done?r(e.value):new t(function(n){n(e.value)}).then(a,s)}c((i=i.apply(e,n)).next())})}!function(e){e.jsonScript='script[type="application/json"]'}(Selector||(Selector={})),function(e){e.json="json",e.js="js"}(Extension||(Extension={})),function(e){e.nothing="",e.period=".",e.space=" ",e.backTick="`"}(StringConstant||(StringConstant={})),function(e){e.file="file"}(CommandlineArgument||(CommandlineArgument={})),function(e){e.file="f"}(CommandlineArgumentShort||(CommandlineArgumentShort={})),function(e){e.json="application/json"}(MimeType||(MimeType={}));const regex={newlines:/\n/gms,multiSpaces:/\s{2,}/gms,backTicks:/`/gms,doubleQuotes:/"/gms},{jsonScript:prefix}=Selector,{newlines:newlines}=regex,{space:space}=StringConstant,{stringify:stringify}=JSON;var getExportText=({text:e,name:n})=>{const t=stringify({name:n,text:e});return`(function(){\n        const { stringify } = JSON;\n        const selector = '${prefix}[data-name="${n}"]';\n        const existingScript = document.querySelector(selector);\n        const script = !existingScript && document.createElement('script');\n\n        if (script) {\n            script.type = 'application/json';\n            script.dataset.name = '${n}';\n            script.innerHTML = stringify(${t});\n\n            document.head.appendChild(script);\n        }\n    })()`.trim().replace(newlines,space)};const{cwd:getWorkingDirectory}=process,args=new Args,{period:period,backTick:backTick}=StringConstant,relativeFilePath=args.get(CommandlineArgument.file)||args.get(CommandlineArgumentShort.file),argumentFile=relativeFilePath&&path.resolve(getWorkingDirectory(),relativeFilePath);function main({file:e}){return __awaiter(this,void 0,void 0,function*(){const n=path.dirname(e),t=path.basename(e),i=[t,Extension.json,Extension.js].join(period),r=[t,Extension.json].join(period),o=path.resolve(n,i),a=yield getFileText(e),s=getExportText({name:r,text:a});createFile(o,s)})}argumentFile&&main({file:argumentFile}),module.exports=main;
//# sourceMappingURL=index.js.map
