#!/usr/bin/env node
"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var Selector,Extension,StringConstant,CommandlineArgument,CommandlineArgumentShort,MimeType,path=require("path"),getFileText=_interopDefault(require("vamtiger-get-file-text")),createFile=_interopDefault(require("vamtiger-create-file")),Args=_interopDefault(require("vamtiger-argv/build/main"));function __awaiter(e,t,n,i){return new(n||(n=Promise))(function(r,o){function a(e){try{c(i.next(e))}catch(e){o(e)}}function s(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(a,s)}c((i=i.apply(e,t)).next())})}!function(e){e.jsonScript='script[type="application/json"]'}(Selector||(Selector={})),function(e){e.json="json",e.js="js"}(Extension||(Extension={})),function(e){e.nothing="",e.period=".",e.space=" ",e.backTick="`"}(StringConstant||(StringConstant={})),function(e){e.file="file"}(CommandlineArgument||(CommandlineArgument={})),function(e){e.file="f"}(CommandlineArgumentShort||(CommandlineArgumentShort={})),function(e){e.json="application/json"}(MimeType||(MimeType={}));const regex={newlines:/\n/gms,multiSpaces:/\s{2,}/gms,backTicks:/`/gms,doubleQuotes:/"/gms},{jsonScript:prefix}=Selector,{multiSpaces:multiSpaces,newlines:newlines}=regex,{space:space}=StringConstant;var getExportText=({fileText:e,name:t})=>`(() => {\n    const selector = '${prefix}[data-name="${t}"]';\n    const existingScript = document.head.querySelector(selector);\n    const script = !existingScript && document.createElement('script');\n    const json = script && {\n        json: "${e}"\n    };\n\n    if (script) {\n        script.dataset.name = '${t}';\n        script.type = '${MimeType.json}';\n        script.innerHTML = JSON.stringify(json);\n        document.head.appendChild(script);\n    }\n})();`.trim().replace(multiSpaces,space).replace(newlines,space);const{cwd:getWorkingDirectory}=process,args=new Args,{period:period,backTick:backTick}=StringConstant,{doubleQuotes:doubleQuotes}=regex,relativeFilePath=args.get(CommandlineArgument.file)||args.get(CommandlineArgumentShort.file),argumentFile=relativeFilePath&&path.resolve(getWorkingDirectory(),relativeFilePath);function main({file:e}){return __awaiter(this,void 0,void 0,function*(){const t=path.dirname(e),n=path.basename(e),i=[n,Extension.json,Extension.js].join(period),r=[n,Extension.json].join(period),o=path.resolve(t,i),a=String.raw`${yield getFileText(e)}`.replace(doubleQuotes,backTick),s=getExportText({name:r,fileText:a});createFile(o,s)})}argumentFile&&main({file:argumentFile}),module.exports=main;
//# sourceMappingURL=index.js.map
