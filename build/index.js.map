{"version":3,"file":"index.js","sources":["../source/types.ts","../source/get-export-text.ts","../source/index.ts"],"sourcesContent":["export enum Selector {\n    jsonScript = 'script[type=\"application/json\"]'\n}\n\nexport enum Extension {\n    json = 'json',\n    js = 'js'\n}\n\nexport enum StringConstant {\n    nothing = '',\n    period = '.',\n    space = ' ',\n    backTick = '`'\n}\n\nexport enum CommandlineArgument {\n    file = 'file'\n}\n\nexport enum CommandlineArgumentShort {\n    file = 'f'\n}\n\nexport enum MimeType {\n    json = 'application/json'\n}\n\nexport interface IExportToBrowserJson {\n    file: string;\n}\n\nexport interface IGetExportText {\n    text: string;\n    name: string;\n}\n\nexport const regex = {\n    newlines: /\\n/msg,\n    multiSpaces: /\\s{2,}/msg,\n    backTicks: /`/msg,\n    doubleQuotes: /\"/msg\n}","import {\n    IGetExportText,\n    Selector,\n    StringConstant,\n    regex\n} from './types';\n\nconst { jsonScript: prefix } = Selector;\nconst { newlines  } = regex;\nconst { space } = StringConstant;\n\nconst { stringify } = JSON;\n\nexport default ({ text, name }: IGetExportText) => {\n    const jsonText = stringify({\n        name,\n        text\n    });\n    const exportText = `(function(){\n        const stringify = JSON.stringify;\n        const selector = '${prefix}[data-name=\"${name}\"]';\n        const existingScript = document.querySelector(selector);\n        const script = !existingScript && document.createElement('script');\n\n        if (script) {\n            script.type = 'application/json';\n            script.dataset.name = '${name}';\n            script.innerHTML = stringify(${jsonText});\n\n            document.head.appendChild(script);\n        }\n    })()`.trim().replace(newlines, space);\n\n    return exportText;\n}","import { dirname, basename, resolve as resolvePath } from 'path';\nimport getFileText from 'vamtiger-get-file-text';\nimport createFile from 'vamtiger-create-file';\nimport Args from 'vamtiger-argv/build/main';\nimport {\n    IExportToBrowserJson,\n    Extension,\n    StringConstant,\n    CommandlineArgument,\n    CommandlineArgumentShort,\n    regex\n} from './types';\nimport getExportText from './get-export-text';\n\nconst { cwd: getWorkingDirectory } = process;\nconst args = new Args();\nconst { period, backTick } = StringConstant;\nconst { doubleQuotes } = regex;\nconst relativeFilePath = args.get(CommandlineArgument.file)\n    || args.get(CommandlineArgumentShort.file);\nconst argumentFile = relativeFilePath && resolvePath(\n    getWorkingDirectory(),\n    relativeFilePath\n);\n\nif (argumentFile) {\n    main({file: argumentFile});\n}\n\nexport default async function main({ file }: IExportToBrowserJson) {\n    const directoryPath = dirname(file);\n    const fileName = basename(file);\n    const exportFileName = [\n        fileName,\n        Extension.json,\n        Extension.js\n    ].join(period);\n    const name = [\n        fileName,\n        Extension.json,\n    ].join(period);\n    const exportFile = resolvePath(\n        directoryPath,\n        exportFileName\n    );\n    const text = await getFileText(file);\n    const exportFileText = getExportText({\n        name,\n        text\n    });\n\n    createFile(exportFile, exportFileText);\n}"],"names":["Selector","Extension","StringConstant","CommandlineArgument","CommandlineArgumentShort","MimeType","regex","newlines","multiSpaces","backTicks","doubleQuotes","jsonScript","prefix","space","stringify","JSON","text","name","jsonText","trim","replace","cwd","getWorkingDirectory","process","args","Args","period","backTick","relativeFilePath","get","file","argumentFile","resolvePath","main","directoryPath","dirname","fileName","basename","exportFileName","json","js","join","exportFile","getFileText","exportFileText","getExportText","createFile"],"mappings":"qGAAYA,SAIAC,UAKAC,eAOAC,oBAIAC,yBAIAC,4dAxBZ,SAAYL,GACRA,+CADJ,CAAYA,WAAAA,cAIZ,SAAYC,GACRA,cACAA,UAFJ,CAAYA,YAAAA,eAKZ,SAAYC,GACRA,aACAA,aACAA,YACAA,eAJJ,CAAYA,iBAAAA,oBAOZ,SAAYC,GACRA,cADJ,CAAYA,sBAAAA,yBAIZ,SAAYC,GACRA,WADJ,CAAYA,2BAAAA,8BAIZ,SAAYC,GACRA,0BADJ,CAAYA,WAAAA,cAaZ,MAAaC,OACTC,SAAU,QACVC,YAAa,YACbC,UAAW,OACXC,aAAc,SClCVC,WAAYC,QAAWZ,UACzBO,SAAEA,UAAcD,OAChBO,MAAEA,OAAUX,gBAEZY,UAAEA,WAAcC,KAEtB,kBAAe,EAAGC,KAAAA,EAAMC,KAAAA,MACpB,MAAMC,EAAWJ,WACbG,KAAAA,EACAD,KAAAA,IAiBJ,4FAbwBJ,qBAAqBK,oQAMZA,iDACMC,6EAIjCC,OAAOC,QAAQb,SAAUM,QCjBnC,MAAQQ,IAAKC,qBAAwBC,QAC/BC,KAAO,IAAIC,MACXC,OAAEA,OAAMC,SAAEA,UAAazB,eAEvB0B,iBAAmBJ,KAAKK,IAAI1B,oBAAoB2B,OAC/CN,KAAKK,IAAIzB,yBAAyB0B,MACnCC,aAAeH,kBAAoBI,aACrCV,sBACAM,kBAOJ,SAA8BK,MAAKH,KAAEA,oDACjC,MAAMI,EAAgBC,aAAQL,GACxBM,EAAWC,cAASP,GACpBQ,GACFF,EACAnC,UAAUsC,KACVtC,UAAUuC,IACZC,KAAKf,QACDT,GACFmB,EACAnC,UAAUsC,MACZE,KAAKf,QACDgB,EAAaV,aACfE,EACAI,GAEEtB,QAAa2B,YAAYb,GACzBc,EAAiBC,eACnB5B,KAAAA,EACAD,KAAAA,IAGJ8B,WAAWJ,EAAYE,KA1BvBb,cACAE,MAAMH,KAAMC"}